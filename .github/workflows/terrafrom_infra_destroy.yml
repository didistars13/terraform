name: üß® Terraform Destroy (Safe via Local Backend)

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type YES_I_UNDERSTAND to confirm destruction"
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  destroy:
    name: üî• Destroy Infrastructure via Migrated Local Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: infra/aws/project/init

    env:
      AWS_REGION: eu-central-1
      TF_BACKEND_REGION: eu-central-1
      TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
      TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
      TF_BACKEND_LOCK_TABLE: ${{ secrets.TF_BACKEND_LOCK_TABLE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: ‚ö†Ô∏è WARNING ‚Äì Confirm Destruction
        run: |
          echo "::warning ::This will destroy live infrastructure."
          echo "::warning ::Make sure you know what you're doing!"

      - name: Validate confirmation input
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "YES_I_UNDERSTAND" ]; then
            echo "::error ::Invalid confirmation. Type YES_I_UNDERSTAND to proceed."
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Step 1 ‚Äì Generate S3 backend config
        run: |
          echo "Generating backend.tf (S3)..."
          envsubst < backend.tf.tmpl > backend.tf

      - name: Step 2 ‚Äì Init from S3 backend
        run: terraform init -input=false

      - name: Step 3 ‚Äì Switch to local backend and migrate
        run: |
          echo "Switching backend to local and migrating state..."
          cat <<EOF > backend.tf
          terraform {
            backend "local" {
              path = "terraform.tfstate"
            }
          }
          EOF
          terraform init -migrate-state -force-copy -input=false

      - name: Step 4 ‚Äì Terraform Destroy
        run: terraform destroy -auto-approve

      - name: "Step 5 ‚Äì Sanity check: Is state empty?"
        run: |
          echo "Verifying state is empty..."
          terraform state list || echo "‚úÖ No resources in state."

      - name: Step 6 ‚Äì Clean up .terraform files
        run: |
          echo "Cleaning up local .terraform files..."
          rm -rf .terraform .terraform.lock.hcl terraform.tfstate*
